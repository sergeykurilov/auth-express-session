model User {
  id        Int      @id @default(autoincrement()) // Уникальный идентификатор пользователя.
  email     String   @unique                       // Электронная почта пользователя, уникальная.
  password  String                                 // Хешированный пароль пользователя.
  sessions  Session[]                              // Связанные сессии пользователя один-ко-многим.
}

model Session {
  id         String   @id @default(uuid())         // Уникальный идентификатор сессии.
  userId     Int                                    // Ссылка на пользователя.
  valid      Boolean  @default(true)               // Флаг валидности сессии.
  userAgent  String?                                // Информация о устройстве пользователя.
  createdAt  DateTime @default(now())              // Дата и время создания сессии.
  updatedAt  DateTime @default(now())              // Дата и время последнего обновления сессии.
  ipAddress  String?                                // IP-адрес сессии.
  expiresAt  DateTime?                              // Время истечения сессии.
  lastUsedAt DateTime @default(now())              // Время последнего использования сессии.

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Связь с пользователем один-ко-многим.
}

datasource db {
  provider = "sqlite"                               // Используемый провайдер базы данных: SQLite.
  url      = "file:./var/db/dev.db"                // Путь к файлу базы данных SQLite.
}

generator client {
  provider = "prisma-client-js"
}

// Уникальный индекс для email (email String @unique):
// Уникальный индекс на поле  почты гарантирует, что все адреса в таблице будут уникальными.
// Кроме того, это значительно ускоряет процесс поиска пользователей
// поскольку база данных может быстро определить, существует ли пользователь с данным адресом.
//
// Индексы для session (например, sessions Session[] и user User @relation(fields: [userId], references: [id])):
// связь один-ко-многим между пользователями и сессиями, используются для оптимизации запросов,
// которые пересекают эти таблицы. Например, если хотим получить все сессии конкретного пользователя,
// индекс по userId в таблице сессий позволяет базе данных быстро найти все записи, связанные с этим пользователем.

// Индексы для оптимизации запросов: Индексы особенно полезны для часто используемых или вычислительно сложных запросов.
// Например, если приложение часто обновляет время последнего использования сессии (lastUsedAt),
// то индекс на этом поле может улучшить производительность обновлений.
